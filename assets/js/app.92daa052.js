"use strict";(self.webpackChunklearn_data=self.webpackChunklearn_data||[]).push([[3524],{2798:(s,i,n)=>{n.d(i,{l:()=>a});const a={category:{"/":{path:"/category/",map:{代码编程:{path:"/category/%E4%BB%A3%E7%A0%81%E7%BC%96%E7%A8%8B/",indexes:[0,1,2]},算法:{path:"/category/%E7%AE%97%E6%B3%95/",indexes:[0,1]}}}},tag:{"/":{path:"/tag/",map:{markdown:{path:"/tag/markdown/",indexes:[2]},算法:{path:"/tag/%E7%AE%97%E6%B3%95/",indexes:[0,1]}}}}}},8589:(s,i,n)=>{n.d(i,{M:()=>a});const a=["/code/%E7%AE%97%E6%B3%95/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F.html","/code/%E7%AE%97%E6%B3%95/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F.html","/code/markdown/markdown%E8%AF%AD%E6%B3%95%E7%A4%BA%E4%BE%8B.html"]},594:(s,i,n)=>{n.d(i,{U:()=>a});const a={article:{"/":{path:"/article/",indexes:[0,1,2]}},star:{"/":{path:"/star/",indexes:[0,1,2]}},timeline:{"/":{path:"/timeline/",indexes:[0,1,2]}}}},6093:(s,i,n)=>{n.d(i,{B:()=>z});var a={};n.r(a);var e={};n.r(e),n.d(e,{default:()=>B});var l={};n.r(l),n.d(l,{default:()=>C});var t={};n.r(t),n.d(t,{default:()=>T});var p={};n.r(p),n.d(p,{default:()=>O});var h=n(9862),r=n(4326),d=n(5860),k=n(4788),o=n(8021),c=n(8493),g=n(5910);const B=(0,h.re)({enhance:({app:s})=>{(0,r.L4)("FontIcon")||s.component("FontIcon",k.A),(0,r.L4)("Badge")||s.component("Badge",o.A),(0,r.L4)("BiliBili")||s.component("BiliBili",c.A),(0,r.L4)("VidStack")||s.component("VidStack",g.A)},setup:()=>{(0,d.r9V)("https://cdn.staticfile.net/font-awesome/6.5.1/js/all.min.js")},rootComponents:[]});var m=n(5431),v=n(1110),y=n(919),b=n(943),u=n(2773),A=n(7041),D=n(7397),E=n(7406);const C=(0,h.re)({enhance:({app:s})=>{},setup:()=>{(0,E.p)()}});var f=n(6142),F=n(4414),w=n(878),x=n(4495),L=n(2360),I=n(5490);(0,x.M_)((s=>{const i=s.t,n=!1!==s.I,a=s.i;return n?{title:i,content:a?()=>[(0,L.h)(w.GB,{icon:a}),i]:null,order:s.O,index:s.I}:null}));const T=(0,h.re)({enhance:({app:s,router:i})=>{const{scrollBehavior:n}=i.options;i.options.scrollBehavior=async(...s)=>(await w.lE.wait(),n(...s)),(0,w.fk)(s),s.component("HopeIcon",w.GB),s.component("BloggerInfo",I.tI),s.component("SocialMedias",I.rS)},setup:()=>{(0,w.PV)(),(0,w.i$)(),(0,I.su)()},layouts:{Layout:w.PE,NotFound:w.Mk,BlogCategory:I.Pn,BlogHome:I.qX,BlogType:I.z7,Timeline:I.Kf}});var j=n(4462);const O=(0,h.re)({}),z=[a,e,m,v,y,b,u,A,D,l,f,F,t,j,p].map((s=>s.default)).filter(Boolean)},6159:(s,i,n)=>{n.d(i,{J:()=>e,c:()=>a});const a=JSON.parse("{}"),e=Object.fromEntries([["/",{loader:()=>n.e(4470).then(n.bind(n,6902)),meta:{t:"LuoThink",i:"fa-solid fa-book-open-reader"}}],["/blog.html",{loader:()=>n.e(6632).then(n.bind(n,5005)),meta:{t:"LuoThink",i:"fa-solid fa-house-crack"}}],["/intro.html",{loader:()=>n.e(3912).then(n.bind(n,824)),meta:{t:"个人介绍",i:"fa-solid fa-circle-nodes"}}],["/apps/Applist.html",{loader:()=>n.e(1024).then(n.bind(n,8045)),meta:{t:"必备应用",i:"fa-solid fa-list",O:1}}],["/apps/Chrome.html",{loader:()=>n.e(4281).then(n.bind(n,568)),meta:{t:"Chrome 扩展",i:"fa-brands fa-chrome",O:3}}],["/apps/toolbox.html",{loader:()=>n.e(8672).then(n.bind(n,3926)),meta:{t:"开源工具",i:"fa-solid fa-land-mine-on",O:2}}],["/apps/topic/",{loader:()=>n.e(6223).then(n.bind(n,7303)),meta:{t:"专题示例",i:"fa-solid fa-icons"}}],["/code/markdown/markdown%E8%AF%AD%E6%B3%95%E7%A4%BA%E4%BE%8B.html",{loader:()=>n.e(9560).then(n.bind(n,3405)),meta:{d:17209152e5,l:"2024年7月14日",c:["代码编程"],g:["markdown"],u:!0,e:'\n<blockquote>\n<p>微信公众号排版工具。问题或建议，请公众号留言。<strong><a href="#jump_8">程序员翻身</a></strong></p>\n</blockquote>\n<p>建议使用 <strong>Chrome</strong> 浏览器，体验最佳效果。</p>\n<p>使用微信公众号编辑器有一个十分头疼的问题：粘贴出来的代码，格式错乱，空间小还带行号，而且特别丑。Markdown.com.cn编辑器能够解决这个问题。</p>\n<p>Markdown是一种轻量级的「标记语言」。</p>\n<p>请阅读下方文本熟悉工具使用方法，本文可直接拷贝到微信中预览。</p>',r:{minutes:6.43,words:1928},t:"markdown语法示例",O:-1,y:"a"}}],["/code/%E7%AE%97%E6%B3%95/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F.html",{loader:()=>n.e(6288).then(n.bind(n,9663)),meta:{d:17210016e5,l:"2024年7月15日",c:["代码编程","算法"],g:["算法"],u:!0,e:'\n<h2>介绍</h2>\n<p>希尔排序，也称递减增量排序算法，是插入排序的一种更高效的改进版本。希尔排序是非稳定排序算法。希尔排序是基于插入排序的以下两点性质而提出改进方法的：</p>\n<ul>\n<li>\n<p>插入排序在对几乎已经排好序的数据操作时，效率高，即可以达到线性排序的效率</p>\n</li>\n<li>\n<p>但插入排序一般来说是低效的，因为插入排序每次只能将数据移动一位</p>\n</li>\n</ul>\n<h2>代码</h2>\n<ol>\n<li>C 代码</li>\n</ol>\n<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> &lt;stdio.h&gt;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> shell_sort</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">[]</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> int</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> len</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> gap, i, j;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> temp;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (gap </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> len </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&gt;&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">; gap </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">; gap </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> gap </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&gt;&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (i </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> gap; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> len; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">){</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">            temp </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[i];</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">            for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (j </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">-</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> gap; j </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2"> &amp;&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[j] </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> temp; j </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">-=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> gap )</span></span>\n<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#E06C75">                arr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[j </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">+</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> gap] </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[j];</span></span>\n<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#E06C75">            arr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[j </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">+</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> gap] </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> temp;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">        }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">() {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">[]</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">22</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">34</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">32</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">82</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">55</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">89</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">50</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">37</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">5</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">64</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">35</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">9</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">70</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">};</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> len </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(arr) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">/sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">arr);</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">    shell_sort</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(arr, len);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> i;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (i </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> len; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">        printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> "</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75">arr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[i]);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:1.99,words:598},t:"希尔排序算法",O:-1,y:"a"}}],["/code/%E7%AE%97%E6%B3%95/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F.html",{loader:()=>n.e(4304).then(n.bind(n,2261)),meta:{d:1721088e6,l:"2024年7月16日",c:["代码编程","算法"],g:["算法"],u:!0,e:'\n<h2>介绍</h2>\n<p><strong>归并排序</strong>（<em>Merge Sort</em>)是一种基于分治法的排序算法。它的主要思想是将一个大的问题分解成若干个小问题来解决，然后将解决的结果合并在一起。归并排序的时间复杂度为 𝑂(𝑛log𝑛),是效率较高的排序算法之一。</p>\n<h2>代码</h2>\n<h3>迭代</h3>\n<ol>\n<li>C</li>\n</ol>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>#include &lt;stdio.h&gt;</span></span>\n<span class="line"><span>#include &lt;stdlib.h&gt;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>int min(int x, int y)</span></span>\n<span class="line"><span>{</span></span>\n<span class="line"><span>    return x &lt; y ? x : y;</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>void merge_sort(int arr[], int len)</span></span>\n<span class="line"><span>{</span></span>\n<span class="line"><span>    int *a = arr;</span></span>\n<span class="line"><span>    int *b = (int *)malloc(len * sizeof(int));</span></span>\n<span class="line"><span>    if (b == NULL)</span></span>\n<span class="line"><span>    {</span></span>\n<span class="line"><span>        fprintf(stderr, "Memory allocation failed\\n");</span></span>\n<span class="line"><span>        return;</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>    int seg, start;</span></span>\n<span class="line"><span>    for (seg = 1; seg &lt; len; seg += seg)</span></span>\n<span class="line"><span>    {</span></span>\n<span class="line"><span>        for (start = 0; start &lt; len; start += seg + seg)</span></span>\n<span class="line"><span>        {</span></span>\n<span class="line"><span>            int low = start, mid = min(start + seg, len), high = min(start + 2 * seg, len);</span></span>\n<span class="line"><span>            int k = low;</span></span>\n<span class="line"><span>            int start1 = low, end1 = mid;</span></span>\n<span class="line"><span>            int start2 = mid, end2 = high;</span></span>\n<span class="line"><span>            while (start1 &lt; end1 &amp;&amp; start2 &lt; end2)</span></span>\n<span class="line"><span>                b[k++] = a[start1] &lt; a[start2] ? a[start1++] : a[start2++];</span></span>\n<span class="line"><span>            while (start1 &lt; end1)</span></span>\n<span class="line"><span>                b[k++] = a[start1++];</span></span>\n<span class="line"><span>            while (start2 &lt; end2)</span></span>\n<span class="line"><span>                b[k++] = a[start2++];</span></span>\n<span class="line"><span>        }</span></span>\n<span class="line"><span>        int *temp = a;</span></span>\n<span class="line"><span>        a = b;</span></span>\n<span class="line"><span>        b = temp;</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>    if (a != arr)</span></span>\n<span class="line"><span>    {</span></span>\n<span class="line"><span>        for (int i = 0; i &lt; len; i++)</span></span>\n<span class="line"><span>            arr[i] = a[i];</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>    free(b);</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>int main()</span></span>\n<span class="line"><span>{</span></span>\n<span class="line"><span>    int arr[] = {22, 34, 3, 32, 82, 55, 89, 50, 37, 5, 64, 35, 9, 70};</span></span>\n<span class="line"><span>    int len = sizeof(arr) / sizeof(*arr);</span></span>\n<span class="line"><span>    merge_sort(arr, len);</span></span>\n<span class="line"><span>    for (int i = 0; i &lt; len; i++)</span></span>\n<span class="line"><span>        printf("%d ", arr[i]);</span></span>\n<span class="line"><span>    printf("\\n");</span></span>\n<span class="line"><span>    return 0;</span></span>\n<span class="line"><span>}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:2.94,words:881},t:"归并排序",O:-1,y:"a"}}],["/404.html",{loader:()=>n.e(7490).then(n.bind(n,9875)),meta:{t:""}}],["/apps/",{loader:()=>n.e(6267).then(n.bind(n,9595)),meta:{t:"Apps"}}],["/code/markdown/",{loader:()=>n.e(862).then(n.bind(n,219)),meta:{t:"Markdown"}}],["/code/",{loader:()=>n.e(738).then(n.bind(n,5125)),meta:{t:"Code"}}],["/code/%E7%AE%97%E6%B3%95/",{loader:()=>n.e(4691).then(n.bind(n,6276)),meta:{t:"算法"}}],["/category/",{loader:()=>n.e(3583).then(n.bind(n,5944)),meta:{t:"分类",I:!1}}],["/category/%E4%BB%A3%E7%A0%81%E7%BC%96%E7%A8%8B/",{loader:()=>n.e(8343).then(n.bind(n,4990)),meta:{t:"代码编程 分类",I:!1}}],["/category/%E7%AE%97%E6%B3%95/",{loader:()=>n.e(9544).then(n.bind(n,4692)),meta:{t:"算法 分类",I:!1}}],["/tag/",{loader:()=>n.e(1797).then(n.bind(n,3494)),meta:{t:"标签",I:!1}}],["/tag/markdown/",{loader:()=>n.e(7931).then(n.bind(n,8795)),meta:{t:"标签: markdown",I:!1}}],["/tag/%E7%AE%97%E6%B3%95/",{loader:()=>n.e(5874).then(n.bind(n,4648)),meta:{t:"标签: 算法",I:!1}}],["/article/",{loader:()=>n.e(7511).then(n.bind(n,4027)),meta:{t:"文章",I:!1}}],["/star/",{loader:()=>n.e(7199).then(n.bind(n,4139)),meta:{t:"星标",I:!1}}],["/timeline/",{loader:()=>n.e(5464).then(n.bind(n,1825)),meta:{t:"时间轴",I:!1}}]])},9354:(s,i,n)=>{n.d(i,{U:()=>a});const a=JSON.parse('{"base":"/","lang":"zh-CN","title":"LuoThink","description":"开源工具、效率方法，记录并输出一切能让自己提升的知识。","head":[["link",{"rel":"alternate","type":"application/atom+xml","href":"https://newzone.top/atom.xml","title":"LuoThink Atom Feed"}],["link",{"rel":"alternate","type":"application/json","href":"https://newzone.top/feed.json","title":"LuoThink JSON Feed"}],["link",{"rel":"alternate","type":"application/rss+xml","href":"https://newzone.top/rss.xml","title":"LuoThink RSS Feed"}],["link",{"rel":"icon","href":"/favicon.ico"}]],"locales":{}}')},8120:(s,i,n)=>{n.d(i,{K:()=>a});const a=JSON.parse('{"encrypt":{},"author":{"name":"LearnData","url":"https://newzone.top"},"logo":"/logo.svg","license":"CC BY-NC-ND 4.0","copyright":"\\n  版权声明：自由转载 - 非商用 - 非衍生 - 保持署名<a href=\\"https://creativecommons.org/licenses/by-nc-nd/4.0/deed.zh-hans\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">（创意共享 4.0 许可证）</a>|\\n  Copyright © 2023-present LearnData</a>\\n  ","displayFooter":true,"breadcrumb":false,"contributors":false,"lastUpdated":true,"editLink":false,"darkmode":"switch","fullscreen":true,"repo":"rockbenben/LearnData","repoLabel":"GitHub","repoDisplay":true,"docsDir":"docs","navbarLayout":{"start":["Brand"],"center":["Links"],"end":["Repo","Outlook","Search"]},"pageInfo":["Category","Tag","Word","ReadingTime","PageView"],"blog":{"articleInfo":["Date","PageView","Category","Tag","ReadingTime"],"name":"Luo","avatar":"/avatar_self.png","description":"爱自由、爱编程！","intro":"/intro.html","medias":{"GitHub":"https://github.com/luojunll"}},"locales":{"/":{"lang":"zh-CN","navbarLocales":{"langName":"简体中文","selectLangAriaLabel":"选择语言"},"metaLocales":{"author":"作者","date":"写作日期","origin":"原创","views":"访问量","category":"分类","tag":"标签","readingTime":"阅读时间","words":"字数","toc":"此页内容","prev":"上一页","next":"下一页","lastUpdated":"上次编辑于","contributors":"贡献者","editLink":"编辑此页","print":"打印"},"blogLocales":{"article":"文章","articleList":"文章列表","category":"分类","tag":"标签","timeline":"时间轴","timelineTitle":"昨日不在","all":"全部","intro":"个人介绍","star":"星标","empty":"$text 为空"},"paginationLocales":{"prev":"上一页","next":"下一页","navigate":"跳转到","action":"前往","errorText":"请输入 1 到 $page 之前的页码！"},"outlookLocales":{"themeColor":"主题色","darkmode":"外观","fullscreen":"全屏"},"routeLocales":{"skipToContent":"跳至主要內容","notFoundTitle":"页面不存在","notFoundMsg":["这里什么也没有","我们是怎么来到这儿的？","这 是 四 零 四 !","看起来你访问了一个失效的链接"],"back":"返回上一页","home":"带我回家","openInNewWindow":"Open in new window"},"navbar":[{"text":"博客","icon":"fa-solid fa-blog","link":"/blog"},{"text":"应用","icon":"fa-solid fa-bars-staggered","prefix":"/","children":["apps/Applist",{"text":"常用扩展","icon":"fa-brands fa-chrome","link":"apps/Chrome"}]},{"text":"工具收藏","icon":"fa-solid fa-bars","link":"https://nav.newzone.top/"}],"sidebar":{"":[{"text":"读书笔记","icon":"fa-brands fa-readme","link":"https://luojunll.github.io/reading/"},{"text":"🧰 应用手册","icon":"","prefix":"/apps/","link":"","collapsible":true,"children":["Applist.md","toolbox.md"]},{"text":"🔡 代码编程","icon":"","prefix":"/code/","collapsible":true,"children":[{"text":"📝 Markdown","icon":"","prefix":"/code/markdown/","collapsible":true,"children":["markdown语法示例.md"]},{"text":"🤖 算法","icon":"","prefix":"/code/算法/","collapsible":true,"children":["希尔排序.md","归并排序.md"]}]},{"text":"博客文章","icon":"fa-solid fa-feather-pointed","prefix":"/_posts/","link":"/blog","collapsible":true,"children":"structure"}]}}}}')},1878:(s,i,n)=>{n.d(i,{v:()=>a});const a={"/_posts/":[]}},8047:(s,i,n)=>{n.d(i,{P:()=>a});const a={GitHub:'<svg xmlns="http://www.w3.org/2000/svg" class="icon github-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#171515"/><path fill="#fff" d="M509.423 146.442c-200.317 0-362.756 162.42-362.756 362.8 0 160.266 103.936 296.24 248.109 344.217 18.139 3.327 24.76-7.872 24.76-17.486 0-8.613-.313-31.427-.49-61.702-100.912 21.923-122.205-48.63-122.205-48.63-16.495-41.91-40.28-53.067-40.28-53.067-32.937-22.51 2.492-22.053 2.492-22.053 36.407 2.566 55.568 37.386 55.568 37.386 32.362 55.438 84.907 39.43 105.58 30.143 3.296-23.444 12.667-39.43 23.032-48.498-80.557-9.156-165.246-40.28-165.246-179.297 0-39.604 14.135-71.988 37.342-97.348-3.731-9.178-16.18-46.063 3.556-96.009 0 0 30.46-9.754 99.76 37.19 28.937-8.048 59.97-12.071 90.823-12.211 30.807.14 61.843 4.165 90.822 12.21 69.26-46.944 99.663-37.189 99.663-37.189 19.792 49.946 7.34 86.831 3.61 96.01 23.25 25.359 37.29 57.742 37.29 97.347 0 139.366-84.82 170.033-165.637 179.013 13.026 11.2 24.628 33.342 24.628 67.182 0 48.498-.445 87.627-.445 99.521 0 9.702 6.535 20.988 24.945 17.444 144.03-48.067 247.881-183.95 247.881-344.175 0-200.378-162.442-362.798-362.802-362.798z"/></svg>'}}},s=>{s.O(0,[786,5258],(()=>(1007,s(s.s=1007)))),s.O()}]);