<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="https://newzone.top/rss.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <atom:link href="https://newzone.top/rss.xml" rel="self" type="application/rss+xml"/>
    <title>LuoThink</title>
    <link>https://newzone.top/</link>
    <description>开源工具、效率方法，记录并输出一切能让自己提升的知识。</description>
    <language>zh-CN</language>
    <pubDate>Tue, 14 Jan 2025 15:23:07 GMT</pubDate>
    <lastBuildDate>Tue, 14 Jan 2025 15:23:07 GMT</lastBuildDate>
    <generator>@vuepress/plugin-feed</generator>
    <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
    <category>代码编程</category>
    <category>信息安全</category>
    <category>算法</category>
    <item>
      <title>portswigger sql 注入案例</title>
      <link>https://newzone.top/code/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/sql_injection.html</link>
      <guid>https://newzone.top/code/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/sql_injection.html</guid>
      <source url="https://newzone.top/rss.xml">portswigger sql 注入案例</source>
      <description>portswigger sql 注入案例 实验准备 案例地址： https://portswigger.net/web-security/sql-injection/blind/lab-conditional-responses 2.sql 注入工具：burpsquite 实验中遇到的坑 光标不齐 需要改变一下字体大小， 在设置里搜索font。 添加变...</description>
      <category>代码编程</category>
      <category>信息安全</category>
      <pubDate>Tue, 16 Jul 2024 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>实验准备</h2>
<ol>
<li>案例地址：  https://portswigger.net/web-security/sql-injection/blind/lab-conditional-responses
<br>
2.sql 注入工具：burpsquite</li>
</ol>
<h2>实验中遇到的坑</h2>
<ol>
<li>光标不齐
需要改变一下字体大小， 在设置里搜索font。
<br></li>
<li>添加变量的时候需要添加$$ , 是两个不是一个。
<br></li>
<li>在最后的结果里，可以根据成功的标志过滤出正确响应，然后按payload1 排序，出来的就是原顺序的密码了。</li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>归并排序</title>
      <link>https://newzone.top/code/%E7%AE%97%E6%B3%95/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F.html</link>
      <guid>https://newzone.top/code/%E7%AE%97%E6%B3%95/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F.html</guid>
      <source url="https://newzone.top/rss.xml">归并排序</source>
      <description>归并排序 介绍 归并排序（Merge Sort)是一种基于分治法的排序算法。它的主要思想是将一个大的问题分解成若干个小问题来解决，然后将解决的结果合并在一起。归并排序的时间复杂度为 𝑂(𝑛log𝑛),是效率较高的排序算法之一。 代码 迭代 C Python 分析 先将数组分为1个为一组，分了7组， 再1，2；3，4；5，6；7；两两比较，给比较的...</description>
      <category>代码编程</category>
      <category>算法</category>
      <pubDate>Tue, 16 Jul 2024 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>介绍</h2>
<p><strong>归并排序</strong>（<em>Merge Sort</em>)是一种基于分治法的排序算法。它的主要思想是将一个大的问题分解成若干个小问题来解决，然后将解决的结果合并在一起。归并排序的时间复杂度为 𝑂(𝑛log𝑛),是效率较高的排序算法之一。</p>
<h2>代码</h2>
<h3>迭代</h3>
<ol>
<li>C</li>
</ol>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>#include &lt;stdio.h&gt;</span></span>
<span class="line"><span>#include &lt;stdlib.h&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>int min(int x, int y)</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>    return x &lt; y ? x : y;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>void merge_sort(int arr[], int len)</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>    int *a = arr;</span></span>
<span class="line"><span>    int *b = (int *)malloc(len * sizeof(int));</span></span>
<span class="line"><span>    if (b == NULL)</span></span>
<span class="line"><span>    {</span></span>
<span class="line"><span>        fprintf(stderr, "Memory allocation failed\n");</span></span>
<span class="line"><span>        return;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    int seg, start;</span></span>
<span class="line"><span>    for (seg = 1; seg &lt; len; seg += seg)</span></span>
<span class="line"><span>    {</span></span>
<span class="line"><span>        for (start = 0; start &lt; len; start += seg + seg)</span></span>
<span class="line"><span>        {</span></span>
<span class="line"><span>            int low = start, mid = min(start + seg, len), high = min(start + 2 * seg, len);</span></span>
<span class="line"><span>            int k = low;</span></span>
<span class="line"><span>            int start1 = low, end1 = mid;</span></span>
<span class="line"><span>            int start2 = mid, end2 = high;</span></span>
<span class="line"><span>            while (start1 &lt; end1 &amp;&amp; start2 &lt; end2)</span></span>
<span class="line"><span>                b[k++] = a[start1] &lt; a[start2] ? a[start1++] : a[start2++];</span></span>
<span class="line"><span>            while (start1 &lt; end1)</span></span>
<span class="line"><span>                b[k++] = a[start1++];</span></span>
<span class="line"><span>            while (start2 &lt; end2)</span></span>
<span class="line"><span>                b[k++] = a[start2++];</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>        int *temp = a;</span></span>
<span class="line"><span>        a = b;</span></span>
<span class="line"><span>        b = temp;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    if (a != arr)</span></span>
<span class="line"><span>    {</span></span>
<span class="line"><span>        for (int i = 0; i &lt; len; i++)</span></span>
<span class="line"><span>            arr[i] = a[i];</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    free(b);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>int main()</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>    int arr[] = {22, 34, 3, 32, 82, 55, 89, 50, 37, 5, 64, 35, 9, 70};</span></span>
<span class="line"><span>    int len = sizeof(arr) / sizeof(*arr);</span></span>
<span class="line"><span>    merge_sort(arr, len);</span></span>
<span class="line"><span>    for (int i = 0; i &lt; len; i++)</span></span>
<span class="line"><span>        printf("%d ", arr[i]);</span></span>
<span class="line"><span>    printf("\n");</span></span>
<span class="line"><span>    return 0;</span></span>
<span class="line"><span>}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li>Python</li>
</ol>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>def min(x, y):</span></span>
<span class="line"><span>    return x if x &lt; y else y</span></span>
<span class="line"><span></span></span>
<span class="line"><span>def merge_sort(arr):</span></span>
<span class="line"><span>    n = len(arr)</span></span>
<span class="line"><span>    a = arr[:]</span></span>
<span class="line"><span>    b = [0] * n</span></span>
<span class="line"><span>    seg = 1</span></span>
<span class="line"><span>    while seg &lt; n:</span></span>
<span class="line"><span>        for start in range(0, n, seg + seg):</span></span>
<span class="line"><span>            low = start</span></span>
<span class="line"><span>            mid = min(start + seg, n)</span></span>
<span class="line"><span>            high = min(start + seg + seg, n)</span></span>
<span class="line"><span>            k = low</span></span>
<span class="line"><span>            start1 = low</span></span>
<span class="line"><span>            end1 = mid</span></span>
<span class="line"><span>            start2 = mid</span></span>
<span class="line"><span>            end2 = high</span></span>
<span class="line"><span>            while start1 &lt; end1 and start2 &lt; end2:</span></span>
<span class="line"><span>                if a[start1] &lt; a[start2]:</span></span>
<span class="line"><span>                    b[k] = a[start1]</span></span>
<span class="line"><span>                    start1 += 1</span></span>
<span class="line"><span>                else:</span></span>
<span class="line"><span>                    b[k] = a[start2]</span></span>
<span class="line"><span>                    start2 += 1</span></span>
<span class="line"><span>                k += 1</span></span>
<span class="line"><span>            while start1 &lt; end1:</span></span>
<span class="line"><span>                b[k] = a[start1]</span></span>
<span class="line"><span>                start1 += 1</span></span>
<span class="line"><span>                k += 1</span></span>
<span class="line"><span>            while start2 &lt; end2:</span></span>
<span class="line"><span>                b[k] = a[start2]</span></span>
<span class="line"><span>                start2 += 1</span></span>
<span class="line"><span>                k += 1</span></span>
<span class="line"><span>        a, b = b, a</span></span>
<span class="line"><span>        seg += seg</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    if a != arr:</span></span>
<span class="line"><span>        for i in range(n):</span></span>
<span class="line"><span>            arr[i] = a[i]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>arr = [38, 27, 43, 3, 9, 82, 10]</span></span>
<span class="line"><span>merge_sort(arr)</span></span>
<span class="line"><span>print(arr)</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3">
<li>
<h4>分析</h4>
</li>
</ol>
<p>先将数组分为1个为一组，分了7组， 再1，2；3，4；5，6；7；两两比较，给比较的两组定义一个指针，指针所指的值相互比较, 也就是在这个块<code>while start1 &lt; end1 and start2 &lt; end2</code>进行，小的值排左边，直到有一组的指针指向了末尾；如果剩的是第一组的就调用<code>while start1 &lt; end1</code>这个块，否则调用<code>while start2 &lt; end2</code>这个块。以此类推，分成4组， 分成2组......最终得到有序的数列。</p>
<h2>递归</h2>
<ol>
<li>C</li>
</ol>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>#include &lt;stdio.h&gt;</span></span>
<span class="line"><span>#include &lt;stdlib.h&gt; // 加入此行以便使用 malloc 和 free</span></span>
<span class="line"><span></span></span>
<span class="line"><span>void merge_sort_recursive(int arr[], int reg[], int start, int end) {</span></span>
<span class="line"><span>    if (start &gt;= end)</span></span>
<span class="line"><span>        return;</span></span>
<span class="line"><span>    int len = end - start, mid = (len &gt;&gt; 1) + start;</span></span>
<span class="line"><span>    int start1 = start, end1 = mid;</span></span>
<span class="line"><span>    int start2 = mid + 1, end2 = end;</span></span>
<span class="line"><span>    merge_sort_recursive(arr, reg, start1, end1);</span></span>
<span class="line"><span>    merge_sort_recursive(arr, reg, start2, end2);</span></span>
<span class="line"><span>    int k = start;</span></span>
<span class="line"><span>    while (start1 &lt;= end1 &amp;&amp; start2 &lt;= end2)</span></span>
<span class="line"><span>        reg[k++] = arr[start1] &lt; arr[start2] ? arr[start1++] : arr[start2++];</span></span>
<span class="line"><span>    while (start1 &lt;= end1)</span></span>
<span class="line"><span>        reg[k++] = arr[start1++];</span></span>
<span class="line"><span>    while (start2 &lt;= end2)</span></span>
<span class="line"><span>        reg[k++] = arr[start2++];</span></span>
<span class="line"><span>    for (k = start; k &lt;= end; k++)</span></span>
<span class="line"><span>        arr[k] = reg[k];</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>void merge_sort(int arr[], const int len) {</span></span>
<span class="line"><span>    int reg[len];</span></span>
<span class="line"><span>    merge_sort_recursive(arr, reg, 0, len - 1);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>int main() {</span></span>
<span class="line"><span>    int arr[] = { 22, 34, 3, 32, 82, 55, 89 };</span></span>
<span class="line"><span>    int len = sizeof(arr) / sizeof(*arr);</span></span>
<span class="line"><span>    merge_sort(arr, len);</span></span>
<span class="line"><span>    for (int i = 0; i &lt; len; i++)</span></span>
<span class="line"><span>        printf("%d ", arr[i]);</span></span>
<span class="line"><span>    printf("\n"); // 增加换行以美化输出</span></span>
<span class="line"><span>    return 0;</span></span>
<span class="line"><span>}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li>Python</li>
</ol>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>def merge_sort_recursive(arr, reg, start, end):</span></span>
<span class="line"><span>    if start &gt;= end:</span></span>
<span class="line"><span>        return</span></span>
<span class="line"><span>    mid = (start + end) // 2</span></span>
<span class="line"><span>    merge_sort_recursive(arr, reg, start, mid)</span></span>
<span class="line"><span>    merge_sort_recursive(arr, reg, mid + 1, end)</span></span>
<span class="line"><span>    start1, end1 = start, mid</span></span>
<span class="line"><span>    start2, end2 = mid + 1, end</span></span>
<span class="line"><span>    k = start</span></span>
<span class="line"><span>    while start1 &lt;= end1 and start2 &lt;= end2:</span></span>
<span class="line"><span>        if arr[start1] &lt; arr[start2]:</span></span>
<span class="line"><span>            reg[k] = arr[start1]</span></span>
<span class="line"><span>            start1 += 1</span></span>
<span class="line"><span>        else:</span></span>
<span class="line"><span>            reg[k] = arr[start2]</span></span>
<span class="line"><span>            start2 += 1</span></span>
<span class="line"><span>        k += 1</span></span>
<span class="line"><span>    while start1 &lt;= end1:</span></span>
<span class="line"><span>        reg[k] = arr[start1]</span></span>
<span class="line"><span>        start1 += 1</span></span>
<span class="line"><span>        k += 1</span></span>
<span class="line"><span>    while start2 &lt;= end2:</span></span>
<span class="line"><span>        reg[k] = arr[start2]</span></span>
<span class="line"><span>        start2 += 1</span></span>
<span class="line"><span>        k += 1</span></span>
<span class="line"><span>    for k in range(start, end + 1):</span></span>
<span class="line"><span>        arr[k] = reg[k]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>def merge_sort(arr):</span></span>
<span class="line"><span>    reg = [0] * len(arr)</span></span>
<span class="line"><span>    merge_sort_recursive(arr, reg, 0, len(arr) - 1)</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 示例使用</span></span>
<span class="line"><span>arr = [22, 34, 3, 32, 82, 55, 89]</span></span>
<span class="line"><span>merge_sort(arr)</span></span>
<span class="line"><span>print(arr)</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3">
<li>
<h3>分析</h3>
</li>
</ol>
<p>逻辑和迭代法差不多。</p>
]]></content:encoded>
    </item>
    <item>
      <title>希尔排序算法</title>
      <link>https://newzone.top/code/%E7%AE%97%E6%B3%95/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F.html</link>
      <guid>https://newzone.top/code/%E7%AE%97%E6%B3%95/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F.html</guid>
      <source url="https://newzone.top/rss.xml">希尔排序算法</source>
      <description>希尔排序算法 介绍 希尔排序，也称递减增量排序算法，是插入排序的一种更高效的改进版本。希尔排序是非稳定排序算法。希尔排序是基于插入排序的以下两点性质而提出改进方法的： 插入排序在对几乎已经排好序的数据操作时，效率高，即可以达到线性排序的效率 但插入排序一般来说是低效的，因为插入排序每次只能将数据移动一位 代码 C 代码 Python 代码 分析 相较于...</description>
      <category>代码编程</category>
      <category>算法</category>
      <pubDate>Mon, 15 Jul 2024 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>介绍</h2>
<p>希尔排序，也称递减增量排序算法，是插入排序的一种更高效的改进版本。希尔排序是非稳定排序算法。希尔排序是基于插入排序的以下两点性质而提出改进方法的：</p>
<ul>
<li>
<p>插入排序在对几乎已经排好序的数据操作时，效率高，即可以达到线性排序的效率</p>
</li>
<li>
<p>但插入排序一般来说是低效的，因为插入排序每次只能将数据移动一位</p>
</li>
</ul>
<h2>代码</h2>
<ol>
<li>C 代码</li>
</ol>
<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> &lt;stdio.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> shell_sort</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">[]</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> int</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> len</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> gap, i, j;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> temp;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (gap </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> len </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&gt;&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">; gap </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">; gap </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> gap </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&gt;&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (i </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> gap; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> len; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">            temp </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[i];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">            for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (j </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">-</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> gap; j </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2"> &amp;&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[j] </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> temp; j </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">-=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> gap )</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#E06C75">                arr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[j </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">+</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> gap] </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[j];</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#E06C75">            arr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[j </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">+</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> gap] </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> temp;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">[]</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">22</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">34</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">32</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">82</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">55</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">89</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">50</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">37</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">5</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">64</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">35</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">9</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">70</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> len </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(arr) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">/sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">arr);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">    shell_sort</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(arr, len);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> i;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (i </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> len; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">        printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> "</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75">arr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[i]);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li>Python 代码</li>
</ol>
<div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> shell_sort</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#24292E;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">arr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    n </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2"> len</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(arr)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    gap </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">//</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> gap </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(gap, n):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">            temp </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> arr[i]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">            j </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> i</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">            while</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> j </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">&gt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> gap </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">and</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> arr[j</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">-</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">gap] </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> temp:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">                arr[j] </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> arr[j </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">-</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">gap]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">                j </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">-=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> gap</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">            arr[j] </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> temp</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">        gap </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">//=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">        </span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">if</span><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75"> __name__</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2"> ==</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> "__main__"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">22</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">34</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">32</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">82</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">55</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">89</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">50</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF">    shell_sort</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(arr)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"Sorted array:"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, arr)</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2>分析</h2>
<p>相较于插入排序， 希尔引入了 <code>gap</code> ，<code>gap</code> 是数组长度对2取模。整个算法的核心是：<em>如果两个元素之间的<strong>步长</strong>为<code>gap</code>的话，比较大小，交换位置，几轮循环之后，<code>gap</code>变为 <strong>1</strong>, 也就是说最后只要进行一次相邻元素比较排序，整个排序就完成了！</em></p>
<p>一番下来，情不自禁：还是 Python 看得更清晰简明一点！</p>
]]></content:encoded>
    </item>
    <item>
      <title>markdown语法示例</title>
      <link>https://newzone.top/code/markdown/markdown%E8%AF%AD%E6%B3%95%E7%A4%BA%E4%BE%8B.html</link>
      <guid>https://newzone.top/code/markdown/markdown%E8%AF%AD%E6%B3%95%E7%A4%BA%E4%BE%8B.html</guid>
      <source url="https://newzone.top/rss.xml">markdown语法示例</source>
      <description>markdown语法示例 微信公众号排版工具。问题或建议，请公众号留言。程序员翻身 建议使用 Chrome 浏览器，体验最佳效果。 使用微信公众号编辑器有一个十分头疼的问题：粘贴出来的代码，格式错乱，空间小还带行号，而且特别丑。Markdown.com.cn编辑器能够解决这个问题。 Markdown是一种轻量级的「标记语言」。 请阅读下方文本熟悉工具使...</description>
      <category>代码编程</category>
      <pubDate>Sun, 14 Jul 2024 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<blockquote>
<p>微信公众号排版工具。问题或建议，请公众号留言。<strong><a href="#jump_8">程序员翻身</a></strong></p>
</blockquote>
<p>建议使用 <strong>Chrome</strong> 浏览器，体验最佳效果。</p>
<p>使用微信公众号编辑器有一个十分头疼的问题：粘贴出来的代码，格式错乱，空间小还带行号，而且特别丑。Markdown.com.cn编辑器能够解决这个问题。</p>
<p>Markdown是一种轻量级的「标记语言」。</p>
<p>请阅读下方文本熟悉工具使用方法，本文可直接拷贝到微信中预览。</p>
<h2>1 Markdown.com.cn 简介</h2>
<ul>
<li>支持自定义样式的 Markdown 编辑器</li>
<li>支持微信公众号、知乎和稀土掘金</li>
<li>点击右上方对应图标，一键复制到各平台</li>
</ul>
<h2>2 Markdown语法教程</h2>
<h3>2.1 标题</h3>
<p>不同数量的<code>#</code>可以完成不同的标题，如下：</p>
<h1>一级标题</h1>
<h2>二级标题</h2>
<h3>三级标题</h3>
<h3>2.2 字体</h3>
<p>粗体、斜体、粗体和斜体，删除线，需要在文字前后加不同的标记符号。如下：</p>
<p><strong>这个是粗体</strong></p>
<p><em>这个是斜体</em></p>
<p><em><strong>这个是粗体加斜体</strong></em></p>
<p><sub>这里想用删除线</sub>~</p>
<p>注：如果想给字体换颜色、字体或者居中显示，需要使用内嵌HTML来实现。</p>
<h3>2.3 无序列表</h3>
<p>无序列表的使用，在符号<code>-</code>后加空格使用。如下：</p>
<ul>
<li>无序列表 1</li>
<li>无序列表 2</li>
<li>无序列表 3</li>
</ul>
<p>如果要控制列表的层级，则需要在符号<code>-</code>前使用空格。如下：</p>
<ul>
<li>无序列表 1</li>
<li>无序列表 2
<ul>
<li>无序列表 2.1</li>
<li>无序列表 2.2</li>
</ul>
</li>
</ul>
<p><strong>由于微信原因，最多支持到二级列表</strong>。</p>
<h3>2.4 有序列表</h3>
<p>有序列表的使用，在数字及符号<code>.</code>后加空格后输入内容，如下：</p>
<ol>
<li>有序列表 1</li>
<li>有序列表 2</li>
<li>有序列表 3</li>
</ol>
<h3>2.5 引用</h3>
<p>引用的格式是在符号<code>&gt;</code>后面书写文字。如下：</p>
<blockquote>
<p>读一本好书，就是在和高尚的人谈话。 ——歌德</p>
</blockquote>
<blockquote>
<p>雇用制度对工人不利，但工人根本无力摆脱这个制度。 ——阮一峰</p>
</blockquote>
<h3>2.7 链接</h3>
<p>微信公众号仅支持公众号文章链接，即域名为<code>https://mp.weixin.qq.com/</code>的合法链接。使用方法如下所示：</p>
<p>对于该论述，欢迎读者查阅之前发过的文章，<a href="https://mp.weixin.qq.com/s/s5IhxV2ooX3JN_X416nidA" target="_blank" rel="noopener noreferrer">你是《未来世界的幸存者》么？</a>
<a id="jump_8"></a></p>
<h3>2.8 图片</h3>
<p>插入图片，格式如下：</p>
<figure><img src="https://www.nginx.cn/wp-content/uploads/2020/03/qrcode_for_gh_82cf87d482f0_258.jpg" alt="这里写图片描述" tabindex="0" loading="lazy"><figcaption>这里写图片描述</figcaption></figure>
<p>支持 jpg、png、gif、svg 等图片格式，<strong>其中 svg 文件仅可在微信公众平台中使用</strong>，svg 文件示例如下：</p>
<figure><img src="https://markdown.com.cn/images/i-am-svg.svg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>支持图片<strong>拖拽和截图粘贴</strong>到编辑器中。</p>
<p>注：支持图片 <em><strong>拖拽和截图粘贴</strong></em> 到编辑器中，仅支持 https 的图片，图片粘贴到微信时会自动上传微信服务器。</p>
<h3>2.9 分割线</h3>
<p>可以在一行中用三个以上的减号来建立一个分隔线，同时需要在分隔线的上面空一行。如下：</p>
]]></content:encoded>
      <enclosure url="https://www.nginx.cn/wp-content/uploads/2020/03/qrcode_for_gh_82cf87d482f0_258.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>xss记录</title>
      <link>https://newzone.top/code/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/xss.html</link>
      <guid>https://newzone.top/code/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/xss.html</guid>
      <source url="https://newzone.top/rss.xml">xss记录</source>
      <description>xss记录 案例一 源码 url参数 example.php?keyword=&amp;quot; onmouseover=&amp;quot;alert(&amp;apos;XSS&amp;apos;)</description>
      <pubDate>Mon, 22 Jul 2024 12:46:15 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>案例一</h2>
<ol>
<li>源码</li>
</ol>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>&lt;!DOCTYPE html&gt;</span></span>
<span class="line"><span>&lt;head&gt;</span></span>
<span class="line"><span>&lt;meta charset="utf-8"&gt;</span></span>
<span class="line"><span>&lt;script&gt;</span></span>
<span class="line"><span>window.alert = function()  </span></span>
<span class="line"><span>{     </span></span>
<span class="line"><span>confirm("哎哟 不错哦！");</span></span>
<span class="line"><span> window.location.href="level3.php?writing=苦尽甘来"; </span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>&lt;/script&gt;</span></span>
<span class="line"><span>&lt;title&gt;第2关&lt;/title&gt;</span></span>
<span class="line"><span>&lt;/head&gt;</span></span>
<span class="line"><span>&lt;body&gt;</span></span>
<span class="line"><span>&lt;h1 align=center&gt;第2关 窒息的操作&lt;/h1&gt;</span></span>
<span class="line"><span>&lt;?php </span></span>
<span class="line"><span>ini_set("display_errors", 0);</span></span>
<span class="line"><span>$str = $_GET["keyword"];</span></span>
<span class="line"><span>echo "&lt;h2 align=center&gt;没有找到和".htmlspecialchars($str)."相关的结果.&lt;/h2&gt;".'&lt;center&gt;</span></span>
<span class="line"><span>&lt;form action=level2.php method=GET&gt;</span></span>
<span class="line"><span>&lt;input name=keyword  value="'.$str.'"&gt;</span></span>
<span class="line"><span>&lt;input type=submit name=submit value="搜索"/&gt;</span></span>
<span class="line"><span>&lt;/form&gt;</span></span>
<span class="line"><span>&lt;/center&gt;';</span></span>
<span class="line"><span>?&gt;</span></span>
<span class="line"><span>&lt;center&gt;&lt;img src="https://dn-coding-net-tweet.codehub.cn/photo/2019/688da926-8a0b-452a-9a2b-82ba919328fb.jpg"&gt;&lt;/center&gt;</span></span>
<span class="line"><span>&lt;?php </span></span>
<span class="line"><span>echo "&lt;h3 align=center&gt;payload的长度:".strlen($str)."&lt;/h3&gt;";</span></span>
<span class="line"><span>?&gt;</span></span>
<span class="line"><span>&lt;/body&gt;</span></span>
<span class="line"><span>&lt;/html&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li>url参数
<code>example.php?keyword=" onmouseover="alert('XSS')</code></li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>选择排序</title>
      <link>https://newzone.top/code/%E7%AE%97%E6%B3%95/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F%E3%80%81%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E3%80%81%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F.html</link>
      <guid>https://newzone.top/code/%E7%AE%97%E6%B3%95/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F%E3%80%81%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E3%80%81%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F.html</guid>
      <source url="https://newzone.top/rss.xml">选择排序</source>
      <description>选择排序 冒泡排序 插入排序</description>
      <pubDate>Tue, 14 Jan 2025 14:41:24 GMT</pubDate>
      <content:encoded><![CDATA[
<div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379">""" </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379">选择排序，从未排序序列中选择一个最小的值放到未排序序列首位</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"""</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> select</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#24292E;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">lst</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">len</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(lst)</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">        k </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> i</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> j </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(i</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">len</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(lst)):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> lst[j] </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> lst[k]:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">                k </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> j</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">        lst[i], lst[k] </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> lst[k], lst[i]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> lst</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">lst </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">4</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">5</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">7</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">6</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">]</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">print</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF">select</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(lst))</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1>冒泡排序</h1>
<div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379">""" </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379">冒泡排序， 比较相邻位置元素的大小， 把大的往后排， 最后会把最大的元素排到最后， 像冒泡一样。</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"""</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> buble</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#24292E;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">lst</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">len</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(lst)</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> j </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(i):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> lst[j] </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> lst[j</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">]:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">                lst[j], lst[j</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> lst[j</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">], lst[j]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> lst</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">lst </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">4</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">5</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">7</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">6</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">]</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">print</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF">buble</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(lst))</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1>插入排序</h1>
<div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379">""" </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379">插入排序， 先选择一个基准元素， 然后在已排序区域</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379">从右往左与基准元素进行比较，比基准元素大， 就往右移动， 和扑克牌一样</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"""</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> insert</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#24292E;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">lst</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">len</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(lst)): </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"># 第一个元素不用排序</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">        base </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> lst[i] </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">        j </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 1</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> # 已排序区域最右端元素</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">        while</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> j </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> and</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> lst[j] </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> base:  </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"># 确保没有超出序列最左端， 以及元素比基准元素大</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">            lst[j</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> lst[j]           </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"># 元素后移</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">            j </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">-=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 1</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">                      # 再比较左边的元素</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">        lst[j</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> base                 </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"># 将基准元素插入空出来的位置</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> lst</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">lst </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">4</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">5</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">7</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">6</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">]</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">print</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF">insert</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(lst))</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
    </item>
  </channel>
</rss>